<!DOCTYPE html>
<html>
	<head>
		<title>MP2 &amp; muppet demo - Maze Generator</title>
		<style>
			span {
				width: 5px;
				height: 5px;
				float: left;
			}

			.clear {
				clear: left;
			}

			.wall {
				background-color: black;
			}

			.path {
				background-color: beige;
			}
		</style>
	</head>
	<body>
	<?
		'''
		The following demo is a translation of the algorithm written in python from
		https://en.wikipedia.org/w/index.php?title=Maze_generation_algorithm&oldid=655624771
		'''

		function getClass(className) {
			return 0.getClass().forName(className);
		}

		function forEach(arr, f) {
			local i = 0;

			while (i < arr.size()) {
				f(arr[i], i);
				i++;
			}
		}

		function createMazeMatrix(width, height) {
			var m = [];

			forEach((0 .. width * height - 1), () => m.add(0));

			forEach((0 .. width - 1), (w) => {
				m[w] = 1;
				m[width * (height - 1) + w] = 1;
			});

			forEach((0 .. height - 1), (h) => {
				m[width * h] = 1;
				m[width * (h + 1) - 1] = 1;
			});

			return (
				'm' -> m,
				'width' -> width,
				'height' -> height,
				'get' -> (y, x) => return m[y * width + x],
				'set' -> (y, x, v) => m[y * width + x] = v
			);
		}

		function createMaze(width, height, complexity, density) {
			width = width || 81;
			height = height || 51;
			complexity = complexity || 0.75;
			density = density || 0.75;

			'''normalize width & height to always be odd'''
			width = (width / 2) * 2 + 1;
			height = (height / 2) * 2 + 1;

			complexity = (int) (complexity * 5 * (width + height));
			density = (int) (density * (width / 2 * height / 2));

			local matrix = createMazeMatrix(width, height);
			local get = matrix['get'];
			local set = matrix['set'];

			local i, j;
			local random = getClass('java.util.Random').newInstance();
			for (i = 0; i < density; ++i) {
				local x = random.nextInt(width / 2) * 2;
				local y = random.nextInt(height / 2) * 2;

				set(y, x, 1);
				for (j = 0; j < complexity; ++j) {
					local neighbours = [];

					if (x > 1)          neighbours.add((y, x - 2));
					if (x < width - 2)  neighbours.add((y, x + 2));
					if (y > 1)          neighbours.add((y - 2, x));
					if (y < height - 2) neighbours.add((y + 2, x));

					if (!neighbours.isEmpty()) {
						local _n = neighbours[random.nextInt(neighbours.size() - 1)];
						local _x = _n[1], _y = _n[0];

						if (get(_y, _x) === 0) {
							set(_y, _x, 1);
							set(_y + (y - _y) / 2, _x + (x - _x) / 2, 1);

							x = _x;
							y = _y;
						}
					}
				}
			}

			return matrix;
		}
	?>
	<?
		function drawMaze(matrix) {
			local i, j;

			for (i = 0; i < matrix['height']; ++i)
				for (j = 0; j < matrix['width']; ++j) {
					local style = matrix['get'](i, j) ? 'wall' : 'path';

					if (j === 0) {
						style += ' clear';
					}

					echo('<span class="' + style + '"></span>');
				}
		}
	?>
	<? drawMaze(createMaze()) ?>
	</body>
</html>
